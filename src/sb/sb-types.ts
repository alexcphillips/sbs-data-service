/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/player": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Data of a specific player, including game stats */
        get: {
            parameters: {
                query: {
                    uuid: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get player's data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            player?: {
                                /** @example 3fa85f6457174562b3fc2c963f66afa6 */
                                uuid?: string;
                                displayname?: string | null;
                                /** @enum {string|null} */
                                rank?: "ADMIN" | "MODERATOR" | "HELPER" | "NORMAL" | null;
                                /** @enum {string|null} */
                                packageRank?: "MVP_PLUS" | "MVP" | "VIP_PLUS" | "VIP" | "NONE" | null;
                                /** @enum {string|null} */
                                newPackageRank?: "MVP_PLUS" | "MVP" | "VIP_PLUS" | "VIP" | "NONE" | null;
                                /** @enum {string|null} */
                                monthlyPackageRank?: "SUPERSTAR" | "NONE" | null;
                                firstLogin?: number | null;
                                lastLogin?: number | null;
                                lastLogout?: number | null;
                                stats?: Record<string, never>;
                            };
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/recentgames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The recently played games of a specific player */
        get: {
            parameters: {
                query: {
                    uuid: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get player's recent game */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /** Format: uuid */
                            uuid?: string;
                            games?: {
                                /** Format: int64 */
                                date?: number;
                                gameType?: string;
                                mode?: string;
                                map?: string;
                                /** Format: int64 */
                                ended?: number;
                            }[];
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The current online status of a specific player */
        get: {
            parameters: {
                query: {
                    uuid: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get player status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /**
                             * Format: uuid
                             * @example ad8fefaa8351454bb739a4eaa872173f
                             */
                            uuid?: string;
                            session?: {
                                online?: boolean;
                                gameType?: string;
                                mode?: string;
                                map?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/guild": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a Guild by a player, id, or name */
        get: {
            parameters: {
                query?: {
                    id?: string;
                    player?: string;
                    name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get guild information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            guild?: Record<string, never>;
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Game Information
         * @description Returns information about Hypixel Games. This endpoint is in early development and we are working to add more information when possible <a href="https://github.com/HypixelDev/PublicAPI/discussions/197#discussioncomment-1047648">HypixelDev/PublicAPI#197</a>
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            /** @description A map where the key is the backend name of the game */
                            games?: {
                                [key: string]: components["schemas"]["Game"] | undefined;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Achievements */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            achievements?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/challenges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Challenges */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            challenges?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/quests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Quests */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            quests?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/guilds/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Guild Achievements */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            one_time?: Record<string, never>;
                            tiered?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/vanity/pets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vanity Pets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            types?: Record<string, never>;
                            rarities?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/vanity/companions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vanity Companions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            types?: Record<string, never>;
                            rarities?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/skyblock/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Collections
         * @description Information regarding Collections in the SkyBlock game.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            /** @example 0.11.22 */
                            version?: string;
                            collections?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/skyblock/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Skills
         * @description Information regarding skills in the SkyBlock game.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            /** @example 0.11.22 */
                            version?: string;
                            skills?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/skyblock/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Items
         * @description Information regarding items in the SkyBlock game.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            items?: components["schemas"]["SkyBlockItem"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/skyblock/election": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Election and Mayor
         * @description Information regarding the current mayor and ongoing election in SkyBlock.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            lastUpdated?: number;
                            /** @description Data regarding the current mayor */
                            mayor?: Record<string, never>;
                            /** @description Data regarding the current election, will not be provided if there is no open election ongoing */
                            current?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/resources/skyblock/bingo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Current Bingo Event
         * @description Information regarding the current bingo event and its goals.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            /**
                             * Format: int64
                             * @description The unix milliseconds timestamp of the last time this data was updated
                             */
                            lastUpdated: number;
                            /**
                             * Format: int32
                             * @description The current bingo event ID, increments by 1 for each bingo hosted
                             * @example 27
                             */
                            id: number;
                            /**
                             * @description The display name for the current bingo event
                             * @example March 2024
                             */
                            name: string;
                            /**
                             * Format: int64
                             * @description The start time of the current bingo event in unix milliseconds
                             * @example 1709269200000
                             */
                            start: number;
                            /**
                             * Format: int64
                             * @description The end time of the current bingo event in unix milliseconds
                             * @example 1709874000000
                             */
                            end: number;
                            /**
                             * @description The modifier for the current bingo event
                             * @example NORMAL
                             * @enum {string}
                             */
                            modifier: "NORMAL" | "EXTREME" | "SECRET";
                            /** @description The goals for the current bingo event, as well as their progress */
                            goals: {
                                /** @description The backend ID for this goal */
                                id: string;
                                /** @description The user friendly display name for this goal */
                                name: string;
                                /** @description Description of this goal */
                                lore?: string;
                                /** @description The full description of this goal */
                                fullLore?: unknown[];
                                /** @description The tiers of this goal, if a global goal */
                                tiers?: number[];
                                /**
                                 * Format: int64
                                 * @description The global progress of this goal
                                 */
                                progress?: number;
                                /**
                                 * Format: int32
                                 * @description The required amount for this specific goal
                                 */
                                requiredAmount?: number;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** News */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            items?: unknown;
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/auction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Request auction(s) by the auction UUID, player UUID, or profile UUID.
         * @description Returns the auctions selected by the provided query. Only one query parameter can be used in a single request, and cannot be filtered by multiple.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The auction UUID that you wish to request */
                    uuid?: string;
                    /** @description The player UUID that you wish to request */
                    player?: string;
                    /** @description The profile UUID that you wish to request */
                    profile?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            auctions?: components["schemas"]["SkyBlockAuction"][];
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/auctions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Active auctions
         * @description Returns the currently active auctions sorted by last updated first and paginated.
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            page?: number;
                            /** @example 32 */
                            totalPages?: number;
                            /** @example 31267 */
                            totalAuctions?: number;
                            /**
                             * Format: int64
                             * @example 1571065561345
                             */
                            lastUpdated?: number;
                            auctions?: components["schemas"]["SkyBlockAuction"][];
                        };
                    };
                };
                404: components["responses"]["MissingPage"];
                422: components["responses"]["InvalidPage"];
                503: components["responses"]["NotPopulated"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/auctions_ended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recently ended auctions
         * @description SkyBlock auctions which ended in the last 60 seconds.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /**
                             * Format: int64
                             * @example 1607456463916
                             */
                            lastUpdated?: number;
                            auctions?: unknown[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/bazaar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Bazaar
         * @description Returns the list of products along with their sell summary, buy summary and quick status.
         *      ### Product Description
         *      The returned product info has 3 main fields:
         *      - `buy_summary`
         *      - `sell_summary`
         *      - `quick_status`
         *
         *     `buy_summary` and `sell_summary` are the current top 30 orders for each transaction type (in-game example: [Stock of Stonks](https://i.imgur.com/SjRONxq.png)).
         *
         *     `quick_status` is a computed summary of the live state of the product (used for advanced mode view in the bazaar):
         *     - `sellVolume` and `buyVolume` are the sum of item amounts in all orders.
         *      - `sellPrice` and `buyPrice` are the weighted average of the top 2% of orders by volume.
         *      - `movingWeek` is the historic transacted volume from last 7d + live state.
         *      - `sellOrders` and `buyOrders` are the count of active orders.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /**
                             * Format: int64
                             * @example 1590854517479
                             */
                            lastUpdated?: number;
                            /** @example {
                             *       "INK_SACK:3": {
                             *         "product_id": "INK_SACK:3",
                             *         "sell_summary": [
                             *           {
                             *             "amount": 20569,
                             *             "pricePerUnit": 4.2,
                             *             "orders": 1
                             *           },
                             *           {
                             *             "amount": 140326,
                             *             "pricePerUnit": 3.8,
                             *             "orders": 2
                             *           }
                             *         ],
                             *         "buy_summary": [
                             *           {
                             *             "amount": 640,
                             *             "pricePerUnit": 4.8,
                             *             "orders": 1
                             *           },
                             *           {
                             *             "amount": 640,
                             *             "pricePerUnit": 4.9,
                             *             "orders": 1
                             *           },
                             *           {
                             *             "amount": 25957,
                             *             "pricePerUnit": 5,
                             *             "orders": 3
                             *           }
                             *         ],
                             *         "quick_status": {
                             *           "productId": "INK_SACK:3",
                             *           "sellPrice": 4.2,
                             *           "sellVolume": 409855,
                             *           "sellMovingWeek": 8301075,
                             *           "sellOrders": 11,
                             *           "buyPrice": 4.99260315136572,
                             *           "buyVolume": 1254854,
                             *           "buyMovingWeek": 5830656,
                             *           "buyOrders": 85
                             *         }
                             *       }
                             *     } */
                            products?: Record<string, never>;
                        };
                    };
                };
                503: components["responses"]["NotPopulated"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Profile by UUID
         * @description SkyBlock profile data, such as stats, objectives etc. The data returned can differ depending on the players in-game API settings.
         */
        get: {
            parameters: {
                query?: {
                    profile?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            profile?: components["schemas"]["SkyBlockProfile"];
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Profiles by player */
        get: {
            parameters: {
                query?: {
                    uuid?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            profiles?: components["schemas"]["SkyBlockProfile"][];
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/museum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Museum data by profile ID
         * @description SkyBlock museum data for all members of the provided profile. The data returned can differ depending on the players in-game API settings.
         */
        get: {
            parameters: {
                query?: {
                    profile?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            profile?: components["schemas"]["SkyBlockMuseum"];
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/garden": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Garden data by profile ID
         * @description SkyBlock garden data for the provided profile.
         */
        get: {
            parameters: {
                query?: {
                    profile?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            garden?: components["schemas"]["SkyBlockGarden"];
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                404: components["responses"]["NoResult"];
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/bingo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Bingo data by player
         * @description Bingo data for participated events of the provided player.
         */
        get: {
            parameters: {
                query?: {
                    uuid?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            events?: {
                                /**
                                 * Format: int32
                                 * @description The id for this event
                                 * @example 2
                                 */
                                key: number;
                                /**
                                 * Format: int32
                                 * @description The amount of points earned
                                 * @example 117
                                 */
                                points: number;
                                /** @description The completed goal IDs */
                                completed_goals: string[];
                            }[];
                        };
                    };
                };
                400: components["responses"]["DataMissing"];
                403: components["responses"]["InvalidKey"];
                /** @description No data could be found for the provided player uuid. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            success?: boolean;
                            /** @example No bingo data could be found */
                            cause?: string;
                        };
                    };
                };
                422: components["responses"]["MalformedData"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/skyblock/firesales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Active/Upcoming Fire Sales
         * @description Retrieve the currently active or upcoming Fire Sales for SkyBlock.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            sales?: components["schemas"]["SkyBlockFireSale"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/housing/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The currently active public houses. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HousingHouse"][];
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/housing/house": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Information about a specific house. */
        get: {
            parameters: {
                query: {
                    /** @description The UUID of the house to get information about. */
                    house: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HousingHouse"];
                    };
                };
                403: components["responses"]["InvalidKey"];
                404: components["responses"]["NoResult"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/housing/houses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The public houses for a specific player. */
        get: {
            parameters: {
                query?: {
                    /** @description The UUID of the player to get houses for. */
                    player?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HousingHouse"][];
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Active Network Boosters */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get boosters list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            boosters?: (components["schemas"]["ActiveBooster"] | components["schemas"]["QueuedBooster"])[];
                            boosterState?: {
                                decrementing?: boolean;
                            };
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current Player Counts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            playerCount?: number;
                            /** @example {
                             *       "GAME_TYPE": {
                             *         "players": 2,
                             *         "modes": {
                             *           "mode_1": 1,
                             *           "mode_2": 1
                             *         }
                             *       }
                             *     } */
                            games?: Record<string, never>;
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/leaderboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current Leaderboards */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            leaderboards?: Record<string, never>;
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
                503: components["responses"]["NotPopulated"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/punishmentstats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Punishment Statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            watchdog_lastMinute?: number;
                            staff_rollingDaily?: number;
                            watchdog_total?: number;
                            watchdog_rollingDaily?: number;
                            staff_total?: number;
                        };
                    };
                };
                403: components["responses"]["InvalidKey"];
                429: components["responses"]["RateLimited"];
                503: components["responses"]["NotPopulated"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Booster: {
            /** Format: objectid */
            _id?: string;
            /**
             * Format: uuid
             * @example ad8fefaa8351454bb739a4eaa872173f
             */
            purchaserUuid?: string;
            amount?: number;
            originalLength?: number;
            length?: number;
            gameType?: number;
            /** Format: int64 */
            dateActivated?: number;
        };
        ActiveBooster: components["schemas"]["Booster"] & {
            stacked?: string[] | null;
        };
        QueuedBooster: components["schemas"]["Booster"] & {
            stacked?: boolean | null;
        };
        /** @example {
         *       "uuid": "409a1e0f261a49849493278d6cd9305a",
         *       "auctioneer": "347ef6c1daac45ed9d1fa02818cf0fb6",
         *       "profile_id": "347ef6c1daac45ed9d1fa02818cf0fb6",
         *       "coop": [
         *         "347ef6c1daac45ed9d1fa02818cf0fb6"
         *       ],
         *       "start": 1573760802637,
         *       "end": 1573761102637,
         *       "item_name": "Azure Bluet",
         *       "item_lore": "§f§lCOMMON",
         *       "extra": "Azure Bluet Red Rose",
         *       "category": "blocks",
         *       "tier": "COMMON",
         *       "starting_bid": 1,
         *       "item_bytes": {
         *         "type": 0,
         *         "data": "H4sIAAAAAAAAAB2NQQqCQBhGv1ErHaKu0KoLtGtnarRIhTpA/OGfDIwZ4wxUF/IeHiyyto/3eBKIIJQEIDx4qsJaYJK07m6FhG+p9hEdVMV7TXU3Wh+JWaW6h6ZXhODYGg5/LeZDfxt6nZR5XhYhgoIaxmKE8dsZXu20YwuJZfa0hmJrjbo6y134f8pTll5O5TnbbgAP05Qaqhk+8AVIrd2eoAAAAA=="
         *       },
         *       "claimed": true,
         *       "claimed_bidders": [],
         *       "highest_bid_amount": 7607533,
         *       "bids": [
         *         {
         *           "auction_id": "409a1e0f261a49849493278d6cd9305a",
         *           "bidder": "99748e629dee463892f68abf3a780094",
         *           "profile_id": "99748e629dee463892f68abf3a780094",
         *           "amount": 7607533,
         *           "timestamp": 1573760824844
         *         }
         *       ]
         *     } */
        SkyBlockAuction: {
            /** Format: objectid */
            _id?: string;
            /** Format: uuid */
            uuid?: string;
            /** Format: uuid */
            auctioneer?: string;
            /** Format: uuid */
            profile_id?: string;
            coop?: string[];
            /** Format: int64 */
            start?: number;
            /** Format: int64 */
            end?: number;
            item_name?: string;
            item_lore?: string;
            extra?: string;
            category?: string;
            tier?: string;
            starting_bid?: number;
            item_bytes?: {
                type?: number;
                data?: string;
            };
            claimed?: boolean;
            claimed_bidders?: unknown[];
            highest_bid_amount?: number;
            bids?: {
                /** Format: uuid */
                auction_id?: string;
                /** Format: uuid */
                bidder?: string;
                /** Format: uuid */
                profile_id?: string;
                amount?: number;
                /** Format: int64 */
                timestamp?: number;
            }[];
        };
        SkyBlockProfile: {
            /** Format: uuid */
            profile_id?: string;
            /** @description A map of member UUIDs to member profiles objects */
            members?: {
                /** Format: uuid */
                player_id?: string;
                profile?: {
                    /** @description If this field exists, the member profile is marked as deleted */
                    deletion_notice?: {
                        /** Format: int64 */
                        timestamp?: number;
                    } | null;
                };
            };
            /** @description The cute name of the profile, only provided on the profiles endpoint */
            cute_name?: string | null;
            /** @description Whether or not this is the currently selected profile, only provided on the profiles endpoint */
            selected?: boolean | null;
            community_upgrades?: Record<string, never>;
            /** @description Information about the bank account for this profile, only present if the API banking setting is enabled */
            banking?: {
                /** Format: double */
                balance?: number;
                transactions?: {
                    /** Format: int64 */
                    timestamp?: number;
                    /** @enum {string} */
                    action?: "DEPOSIT" | "WITHDRAW";
                    initiator_name?: string;
                    /** Format: double */
                    amount?: number;
                }[];
            } | null;
            /**
             * @description The SkyBlock game mode of the profile, not present if normal mode
             * @enum {string|null}
             */
            game_mode?: "ironman" | "island" | "bingo" | null;
        };
        /** @example {
         *       "material": "LEATHER_CHESTPLATE",
         *       "color": "255,215,0",
         *       "name": "Farm Armor Chestplate",
         *       "category": "CHESTPLATE",
         *       "tier": "RARE",
         *       "stats": {
         *         "DEFENSE": 75,
         *         "HEALTH": 20
         *       },
         *       "npc_sell_price": 5200,
         *       "id": "FARM_ARMOR_CHESTPLATE"
         *     } */
        SkyBlockItem: {
            /** @description The unique identifier for this item */
            id?: string;
            /** @description The Bukkit material enum value for the item */
            material?: string;
            /** @description The name of the item */
            name?: string;
            /**
             * @description The rarity tier of the item
             * @enum {string}
             */
            tier?: "COMMON" | "UNCOMMON" | "RARE" | "EPIC" | "LEGENDARY" | "MYTHIC" | "SUPREME" | "SPECIAL" | "VERY_SPECIAL";
            /** @description The color metadata to be applied to an item, usually leather armor pieces */
            color?: string;
            /** @description The skin value for a skull based item */
            skin?: string;
        };
        SkyBlockMuseum: {
            /** Format: int64 */
            value?: number;
            appraisal?: boolean;
            items?: Record<string, never>;
            special?: unknown[];
        };
        /**
         * @description Information about a specific game. When a field is not present you should fallback to the provided default if there is one, required fields will always exist.
         * @example {
         *       "id": 58,
         *       "name": "Bed Wars",
         *       "databaseName": "Bedwars",
         *       "modeNames": {
         *         "BEDWARS_TWO_FOUR": "4v4",
         *         "BEDWARS_EIGHT_ONE": "Solo"
         *       }
         *     }
         */
        Game: {
            /**
             * @description The backend ID of the game.
             * @example 1
             */
            id: number;
            /**
             * @description The display name of the game.
             * @example Bed Wars
             */
            name: string;
            /**
             * @description The key used for database storage, such as for stats.
             * @example Bedwars
             */
            databaseName: string;
            /**
             * @description A map of mode key to display name
             * @example {
             *       "solo_normal": "Solo",
             *       "team_normal": "Doubles"
             *     }
             */
            modeNames?: Record<string, never>;
            /**
             * @description True if the game is retired and no longer playable.
             * @default false
             */
            retired: boolean;
            /**
             * @description True if the game is legacy and part of the Classic Lobby.
             * @default false
             */
            legacy: boolean;
        };
        SkyBlockFireSale: {
            /** @description The SkyBlock item ID for this sale */
            item_id?: string;
            /** @description The start time in unix milliseconds for the sale */
            start?: number;
            /** @description The end time in unix milliseconds for the sale */
            end?: number;
            /** @description The amount of items available for this sale */
            amount?: number;
            /** @description The price in Gems for this sale */
            price?: number;
        };
        /** @description Information about a player's SkyBlock garden, the only guaranteed field is the `uuid` field. */
        SkyBlockGarden: {
            /**
             * Format: uuid
             * @description The UUID of the profile for this garden.
             */
            uuid: string;
            commission_data?: {
                /**
                 * @description A map of visitor identifier to visit count
                 * @example {
                 *       "jerry": 1,
                 *       "jacob": 2,
                 *       "andrew": 3
                 *     }
                 */
                visits?: Record<string, never>;
                /**
                 * @description A map of visitor identifier to completed count
                 * @example {
                 *       "jerry": 1,
                 *       "jacob": 1,
                 *       "andrew": 2
                 *     }
                 */
                completed?: Record<string, never>;
                /** Format: int32 */
                total_completed?: number;
                /** Format: int32 */
                unique_npcs_served?: number;
            };
            /** @example {
             *       "organic_matter": 1772.8,
             *       "fuel_units": 17000,
             *       "compost_units": 0,
             *       "compost_items": 2,
             *       "conversion_ticks": 300,
             *       "last_save": 1721039418436,
             *       "upgrades": {
             *         "speed": 25,
             *         "multi_drop": 25,
             *         "fuel_cap": 22,
             *         "organic_matter_cap": 25,
             *         "cost_reduction": 25
             *       }
             *     } */
            composter_data?: Record<string, never>;
            /** @example {
             *       "liam": {
             *         "requirement": [
             *           {
             *             "original_item": "NETHER_STALK",
             *             "original_amount": 93995,
             *             "item": "MUTANT_NETHER_STALK",
             *             "amount": 4
             *           }
             *         ],
             *         "status": "NOT_STARTED",
             *         "position": 1
             *       },
             *       "lumberjack": {
             *         "requirement": [
             *           {
             *             "original_item": "POTATO_ITEM",
             *             "original_amount": 81380,
             *             "item": "ENCHANTED_BAKED_POTATO",
             *             "amount": 3
             *           }
             *         ],
             *         "status": "NOT_STARTED",
             *         "position": 2
             *       },
             *       "oringo": {
             *         "requirement": [
             *           {
             *             "original_item": "WHEAT",
             *             "original_amount": 26798,
             *             "item": "ENCHANTED_HAY_BLOCK",
             *             "amount": 21
             *           }
             *         ],
             *         "status": "NOT_STARTED",
             *         "position": 3
             *       },
             *       "rhys": {
             *         "requirement": [
             *           {
             *             "original_item": "JACK_O_LANTERN",
             *             "original_amount": 512,
             *             "item": "JACK_O_LANTERN",
             *             "amount": 512
             *           }
             *         ],
             *         "status": "NOT_STARTED",
             *         "position": 4
             *       },
             *       "fear_mongerer": {
             *         "requirement": [
             *           {
             *             "original_item": "PUMPKIN",
             *             "original_amount": 27709,
             *             "item": "POLISHED_PUMPKIN",
             *             "amount": 1
             *           }
             *         ],
             *         "status": "NOT_STARTED",
             *         "position": 5,
             *         "extra_rewards": [
             *           {
             *             "candy": "PURPLE_CANDY"
             *           }
             *         ]
             *       }
             *     } */
            active_commissions?: Record<string, never>;
            /**
             * @description A map of resource ID to amount collected
             * @example {
             *       "WHEAT": 100,
             *       "POTATO_ITEM": 100,
             *       "INK_SACK:3": 100
             *     }
             */
            resources_collected?: Record<string, never>;
            /** @example {
             *       "WHEAT": 1,
             *       "POTATO_ITEM": 2,
             *       "INK_SACK:3": 3
             *     } */
            crop_upgrade_levels?: Record<string, never>;
            /** @example [
             *       "beginner_1",
             *       "intermediate_3"
             *     ] */
            unlocked_plots_ids?: string[];
            /** Format: double */
            garden_experience?: number;
            unlocked_barn_skins?: string[];
            selected_barn_skin?: string;
        };
        /** @description Information about a player's house. This data may be cached for a short period of time. */
        HousingHouse: {
            /**
             * Format: uuid
             * @description The UUID of this house.
             */
            uuid: string;
            /**
             * Format: uuid
             * @description The UUID of the owner of this house.
             */
            owner: string;
            /** @description The name of this house, may contain Minecraft color symbols. */
            name: string | null;
            /**
             * Format: int64
             * @description The time this house was created.
             */
            createdAt: number;
            /**
             * Format: int32
             * @description The number of players in this house.
             */
            players: number;
            cookies: {
                /**
                 * Format: int32
                 * @description The current amount of cookies that this house has for the current week.
                 */
                current?: number;
            };
        };
    };
    responses: {
        /** @description Some data is missing, this is usually a field. */
        DataMissing: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Missing one or more fields [...] */
                    cause?: string;
                };
            };
        };
        /** @description Access is forbidden, usually due to an invalid API key being used. */
        InvalidKey: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Invalid API key */
                    cause?: string;
                };
            };
        };
        /** @description A request limit has been reached, usually this is due to the limit on the key being reached but can also be triggered by a global throttle. */
        RateLimited: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Key throttle */
                    cause?: string;
                    /** @example true */
                    throttle?: boolean;
                    /**
                     * @description When this boolean exists and is true, the throttle occurring is a global throttle applied to all users
                     * @example true
                     */
                    global?: boolean;
                };
            };
        };
        /** @description The page provided is invalid. */
        InvalidPage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Invalid page */
                    cause?: string;
                };
            };
        };
        /** @description The page provided does not exist. */
        MissingPage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Page not found */
                    cause?: string;
                };
            };
        };
        /** @description Some data provided is invalid. */
        MalformedData: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Malformed UUID */
                    cause?: string;
                };
            };
        };
        /** @description The data is not yet populated and should be available shortly */
        NotPopulated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example Leaderboard data has not yet been populated */
                    cause?: string;
                };
            };
        };
        /** @description The request responded with no result. */
        NoResult: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example false */
                    success?: boolean;
                    /** @example No result was found */
                    cause?: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
